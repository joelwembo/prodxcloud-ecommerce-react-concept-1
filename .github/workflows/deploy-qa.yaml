
name: QA --> Terraform CI/CD pipeline To AWS EKS - Enterprise

on:
  push:
    branches: ['master' , 'main', 'qa']
  pull_request:
    branches: [ "master" , 'main' ,'dev']

  workflow_dispatch:
      inputs:
        git-ref:
          description: Git Ref (Optional)
          default: master
          required: false
    
        account:
          description:  qa
          default: qa
          required: true  

        account_qa:
          description: qa
          default: qa
          required: true
     
        environment:
          description: qa
          default: qa
          required: false   

permissions:
    contents: write   
env:
# verbosity setting for Terraform log
TF_LOG: INFO
APP_NAME: "prodxcloud-store-qa"
DOCKER_IMAGE: "joelwembo/prodxcloud-store:qa"
AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
CLUSTER_NAME: "prodxcloud-cluster-qa"
CLUSTER_SERVICE: "prodxcloud-cluster-qa-service"
AWS_DEFAULT_REGION: "us-east-1"  
CONFIG_DIRECTORY: "./deployment/terraform/terraform-provision-ekscluster-use-case-1"


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      # - run: npm ci
      # - run: npm run build --if-present
      # - run: npm list

  push-docker-image:
    name: Build Docker image and push to repositories for qa
    # run only when code is compiling and tests are passing
    runs-on: ubuntu-latest
    needs: ['build']
    # steps to perform in job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # setup Docker build action
      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: docker build -t ${{env.DOCKER_IMAGE}} .
      - run: docker push ${{env.DOCKER_IMAGE}} 

  provision-aws-eks-cluster-qa:
    runs-on: ubuntu-latest
    needs: ['build', 'push-docker-image']
    steps:
      - name: AWS EKS Deployment
        uses: actions/checkout@v3

      - name: Create EKS Creater 
        run: aws eks list-clusters
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}    
  
  deploy-to-qa:
    runs-on: ubuntu-latest
    needs: ['build', 'push-docker-image', 'provision-aws-eks-cluster-qa']
    environment: 
        name: qa
        url: https://dev-qa.prodxcloud.net/
    steps:
      - name: AWS EKS Deployment
        uses: actions/checkout@v3

      - name: Pull the Docker image
        run: docker pull joelwembo/prodxcloud-store:qa

      - name: Update kubeconfig
        run: aws eks --region us-east-1 update-kubeconfig --name ${{ env.CLUSTER_NAME}}
      - name: Deploy to EKS
        run: kubectl apply -f /k8s/deployment-qa.yaml

      - name: Deploy to EKS
        run: kubectl expose deployment ${{ env.CLUSTER_NAME}} --type=LoadBalancer --name=${{ env.CLUSTER_SERVICE}} 
        run: aws eks list-clusters

      - name: Load Balancer DNS
        run: kubectl get services ${{ env.CLUSTER_SERVICE}}  
       
             
