# name: "Terraform Pipeline AWS API Gateway , Cognito and Route53"

# on:
#  push:
#    branches: ['master', 'main']
#  pull_request:
#    branches: ['master', 'main']

# permissions:
#     contents: write
# env:
#  TF_LOG: INFO
#  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#  TF_CLOUD_ORGANIZATION: "prodxcloud"
#  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN}}
#  TF_WORKSPACE: "prodxcloud"
#  CONFIG_DIRECTORY: "./terraform/aws/terraform-aws-api-gateway-cognito-route53/"

# jobs:
#  terraform:
#    name: "Auth & API Using Cognito and Custom Domain"
#    runs-on: ubuntu-latest
#    environment: production 
#    defaults:
#      run:
#        shell: bash
#        # We keep Terraform files in the terraform directory.
#        working-directory: terraform/aws/terraform-aws-api-gateway-cognito-route53
 
#    steps:
#      - name: Checkout the repository to the runner
#        uses: actions/checkout@v2
 
#      - name: Setup Terraform with specified version on the runner
#        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_version: 1.3.0
    
#      - name: Terraform init 
#        id: init
#        run: terraform init -lock=false
 
#      - name: Terraform format
#        id: fmt
#        run: terraform fmt
    
#      - name: Terraform validate
#        id: validate
#        run: terraform validate
 
#     #  - name: Terraform plan
#     #    id: plan
#     #   #  if: github.event_name == 'pull_request'
#     #    run: terraform plan -no-color -input=false
#     #    continue-on-error: true
    
#     #  - uses: actions/github-script@v6
#     #   #  if: github.event_name == 'pull_request'
#     #    env:
#     #      PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#     #    with:
#     #      script: |
#     #        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#     #        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#     #        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#     #        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
 
#     #        <details><summary>Show Plan</summary>
 
#     #        \`\`\`\n
#     #        ${process.env.PLAN}
#     #        \`\`\`
 
#     #        </details>
#     #        *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
 
#     #        github.rest.issues.createComment({
#     #          issue_number: context.issue.number,
#     #          owner: context.repo.owner,
#     #          repo: context.repo.repo,
#     #          body: output
#     #        })
 
#     #  - name: Terraform Plan Status
#     #    if: steps.plan.outcome == 'failure'
#     #    run: exit 1
 
#     #  - name: Terraform Apply
#     #    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
#     #    run: terraform apply -auto-approve -input=false -lock=false
     
#      - name: Terraform Apply
#       #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        run: terraform destroy -auto-approve -input=false -lock=false  
