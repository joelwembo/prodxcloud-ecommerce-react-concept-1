# # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs
# name: CI/CD Pipeline for React App to AWS EKS

# on:
#   push:
#     branches: ['master' , 'main']
#   pull_request:
#     branches: [ "master" , 'main']

# permissions:
#     contents: write   
# env:
#   DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#   DOCKERHUB_TOKEN: ${{ secrets.DOCKER_PASSWORD }}
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
#   AWS_DEFAULT_REGION: "us-east-1"    

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [18]
#         # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

#     steps:
#       - uses: actions/checkout@v3
#       - name: Use Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v3
#         with:
#           node-version: ${{ matrix.node-version }}
#           cache: 'npm'
#       # - run: npm ci
#       # - run: npm run build --if-present
#       # - run: npm list

#   push-docker-image:
#     name: Build Docker image and push to repositories
#     # run only when code is compiling and tests are passing
#     runs-on: ubuntu-latest
#     needs: ['build']
#     # steps to perform in job
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # setup Docker build action
#       # - name: Set up Docker Buildx
#       #   id: buildx
#       #   uses: docker/setup-buildx-action@v2

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#       - run: docker build -t joelwembo/prodxcloud:latest  --no-cache .
#       - run: docker push joelwembo/prodxcloud:latest  

#   provision-aws-eks-cluster:
#     runs-on: ubuntu-latest
#     needs: ['build', 'push-docker-image']
#     steps:
#       - name: AWS EKS Deployment
#         uses: actions/checkout@v3

#       - name: Create EKS Creater 
#         run: aws eks list-clusters
#         # run: aws eks create-cluster --region us-east-1 --name my-demo-cluster  --role-arn < from user_account > --resources-vpc-config < here >
#         env:
#           AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}    
  
  
#   deploy:
#     runs-on: ubuntu-latest
#     needs: ['build', 'push-docker-image', 'provision-aws-eks-cluster']
#     steps:
#       - name: AWS EKS Deployment
#         uses: actions/checkout@v3

#       - name: Pull the Docker image
#         run: docker pull joelwembo/prodxcloud:latest

#       - name: Update kubeconfig
#         run: aws eks --region us-east-1 update-kubeconfig --name my-demo-cluster
#         env:
#           AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}    
    
#       - name: Deploy to EKS
#         run: kubectl apply -f deployment.yaml 
#         env:
#           AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}} 

#       - name: Deploy to EKS
#         # run: kubectl expose deployment prodxcloud-store --type=LoadBalancer --name=my-service  
#         run: aws eks list-clusters
#         env:
#           AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}

#       - name: Load Balancer DNS
#         run: kubectl get services my-service 
#         env:
#           AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}    
             
